// Code generated by protoc-gen-go. DO NOT EDIT.
// source: collector.proto

/*
Package collector is a generated protocol buffer package.

It is generated from these files:
	collector.proto

It has these top-level messages:
	CollectorRequest
	CollectorResponse
*/
package collector

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Request message for creating a new collector
type CollectorRequest struct {
	Client    *CollectorRequest_Client    `protobuf:"bytes,1,opt,name=client" json:"client,omitempty"`
	Processes []*CollectorRequest_Process `protobuf:"bytes,2,rep,name=processes" json:"processes,omitempty"`
}

func (m *CollectorRequest) Reset()                    { *m = CollectorRequest{} }
func (m *CollectorRequest) String() string            { return proto.CompactTextString(m) }
func (*CollectorRequest) ProtoMessage()               {}
func (*CollectorRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CollectorRequest) GetClient() *CollectorRequest_Client {
	if m != nil {
		return m.Client
	}
	return nil
}

func (m *CollectorRequest) GetProcesses() []*CollectorRequest_Process {
	if m != nil {
		return m.Processes
	}
	return nil
}

type CollectorRequest_Client struct {
	Id       string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Secret   string `protobuf:"bytes,2,opt,name=secret" json:"secret,omitempty"`
	Hostname string `protobuf:"bytes,3,opt,name=hostname" json:"hostname,omitempty"`
	Uuid     string `protobuf:"bytes,4,opt,name=uuid" json:"uuid,omitempty"`
	Uname    string `protobuf:"bytes,5,opt,name=uname" json:"uname,omitempty"`
}

func (m *CollectorRequest_Client) Reset()                    { *m = CollectorRequest_Client{} }
func (m *CollectorRequest_Client) String() string            { return proto.CompactTextString(m) }
func (*CollectorRequest_Client) ProtoMessage()               {}
func (*CollectorRequest_Client) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

func (m *CollectorRequest_Client) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CollectorRequest_Client) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

func (m *CollectorRequest_Client) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *CollectorRequest_Client) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *CollectorRequest_Client) GetUname() string {
	if m != nil {
		return m.Uname
	}
	return ""
}

type CollectorRequest_Process struct {
	Protocol    string                     `protobuf:"bytes,1,opt,name=protocol" json:"protocol,omitempty"`
	UserID      string                     `protobuf:"bytes,2,opt,name=UserID" json:"UserID,omitempty"`
	User        string                     `protobuf:"bytes,3,opt,name=User" json:"User,omitempty"`
	Name        string                     `protobuf:"bytes,4,opt,name=Name" json:"Name,omitempty"`
	PID         int32                      `protobuf:"varint,5,opt,name=PID" json:"PID,omitempty"`
	Exe         string                     `protobuf:"bytes,6,opt,name=Exe" json:"Exe,omitempty"`
	State       string                     `protobuf:"bytes,7,opt,name=State" json:"State,omitempty"`
	IP          string                     `protobuf:"bytes,8,opt,name=IP" json:"IP,omitempty"`
	Port        int64                      `protobuf:"varint,9,opt,name=Port" json:"Port,omitempty"`
	ForeignIP   string                     `protobuf:"bytes,10,opt,name=ForeignIP" json:"ForeignIP,omitempty"`
	ForeignPort int64                      `protobuf:"varint,11,opt,name=ForeignPort" json:"ForeignPort,omitempty"`
	Inode       int32                      `protobuf:"varint,12,opt,name=Inode" json:"Inode,omitempty"`
	Time        *google_protobuf.Timestamp `protobuf:"bytes,13,opt,name=Time" json:"Time,omitempty"`
}

func (m *CollectorRequest_Process) Reset()                    { *m = CollectorRequest_Process{} }
func (m *CollectorRequest_Process) String() string            { return proto.CompactTextString(m) }
func (*CollectorRequest_Process) ProtoMessage()               {}
func (*CollectorRequest_Process) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 1} }

func (m *CollectorRequest_Process) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *CollectorRequest_Process) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *CollectorRequest_Process) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *CollectorRequest_Process) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CollectorRequest_Process) GetPID() int32 {
	if m != nil {
		return m.PID
	}
	return 0
}

func (m *CollectorRequest_Process) GetExe() string {
	if m != nil {
		return m.Exe
	}
	return ""
}

func (m *CollectorRequest_Process) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *CollectorRequest_Process) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

func (m *CollectorRequest_Process) GetPort() int64 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *CollectorRequest_Process) GetForeignIP() string {
	if m != nil {
		return m.ForeignIP
	}
	return ""
}

func (m *CollectorRequest_Process) GetForeignPort() int64 {
	if m != nil {
		return m.ForeignPort
	}
	return 0
}

func (m *CollectorRequest_Process) GetInode() int32 {
	if m != nil {
		return m.Inode
	}
	return 0
}

func (m *CollectorRequest_Process) GetTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

type CollectorResponse struct {
	Id      string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Success bool   `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
}

func (m *CollectorResponse) Reset()                    { *m = CollectorResponse{} }
func (m *CollectorResponse) String() string            { return proto.CompactTextString(m) }
func (*CollectorResponse) ProtoMessage()               {}
func (*CollectorResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CollectorResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CollectorResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterType((*CollectorRequest)(nil), "collector.CollectorRequest")
	proto.RegisterType((*CollectorRequest_Client)(nil), "collector.CollectorRequest.Client")
	proto.RegisterType((*CollectorRequest_Process)(nil), "collector.CollectorRequest.Process")
	proto.RegisterType((*CollectorResponse)(nil), "collector.CollectorResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Collector service

type CollectorClient interface {
	// Create a new Collector - A simple RPC
	CreateCollector(ctx context.Context, in *CollectorRequest, opts ...grpc.CallOption) (*CollectorResponse, error)
}

type collectorClient struct {
	cc *grpc.ClientConn
}

func NewCollectorClient(cc *grpc.ClientConn) CollectorClient {
	return &collectorClient{cc}
}

func (c *collectorClient) CreateCollector(ctx context.Context, in *CollectorRequest, opts ...grpc.CallOption) (*CollectorResponse, error) {
	out := new(CollectorResponse)
	err := grpc.Invoke(ctx, "/collector.Collector/CreateCollector", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Collector service

type CollectorServer interface {
	// Create a new Collector - A simple RPC
	CreateCollector(context.Context, *CollectorRequest) (*CollectorResponse, error)
}

func RegisterCollectorServer(s *grpc.Server, srv CollectorServer) {
	s.RegisterService(&_Collector_serviceDesc, srv)
}

func _Collector_CreateCollector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectorServer).CreateCollector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collector.Collector/CreateCollector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectorServer).CreateCollector(ctx, req.(*CollectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Collector_serviceDesc = grpc.ServiceDesc{
	ServiceName: "collector.Collector",
	HandlerType: (*CollectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCollector",
			Handler:    _Collector_CreateCollector_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "collector.proto",
}

func init() { proto.RegisterFile("collector.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 429 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x52, 0x4d, 0x8b, 0xd4, 0x40,
	0x10, 0x75, 0x32, 0x33, 0x99, 0x49, 0x8d, 0xba, 0x6b, 0x23, 0xd2, 0xc4, 0x05, 0x43, 0xbc, 0xcc,
	0x29, 0x0b, 0xe3, 0x4d, 0xf0, 0x20, 0xb3, 0x0a, 0xb9, 0x2c, 0xa1, 0x5d, 0x4f, 0x9e, 0xb2, 0x49,
	0x39, 0x06, 0x92, 0x74, 0xec, 0xee, 0x88, 0x7f, 0xd1, 0x1f, 0xe0, 0xff, 0x91, 0xae, 0xce, 0xc7,
	0xa2, 0x32, 0xb7, 0x7a, 0xaf, 0x5f, 0xd5, 0x7b, 0x54, 0x17, 0x5c, 0x14, 0xb2, 0xae, 0xb1, 0x30,
	0x52, 0x25, 0x9d, 0x92, 0x46, 0xb2, 0x60, 0x22, 0xc2, 0x57, 0x27, 0x29, 0x4f, 0x35, 0x5e, 0xd3,
	0xc3, 0x7d, 0xff, 0xf5, 0xda, 0x54, 0x0d, 0x6a, 0x93, 0x37, 0x9d, 0xd3, 0xc6, 0xbf, 0x57, 0x70,
	0x79, 0x1c, 0xe5, 0x02, 0xbf, 0xf7, 0xa8, 0x0d, 0x7b, 0x0b, 0x7e, 0x51, 0x57, 0xd8, 0x1a, 0xbe,
	0x88, 0x16, 0xfb, 0xdd, 0x21, 0x4e, 0x66, 0x8b, 0xbf, 0xc5, 0xc9, 0x91, 0x94, 0x62, 0xe8, 0x60,
	0xef, 0x21, 0xe8, 0x94, 0x2c, 0x50, 0x6b, 0xd4, 0xdc, 0x8b, 0x96, 0xfb, 0xdd, 0xe1, 0xf5, 0xb9,
	0xf6, 0xcc, 0x89, 0xc5, 0xdc, 0x15, 0xfe, 0x00, 0xdf, 0x0d, 0x65, 0x4f, 0xc1, 0xab, 0x4a, 0x0a,
	0x11, 0x08, 0xaf, 0x2a, 0xd9, 0x0b, 0xf0, 0x35, 0x16, 0x0a, 0x0d, 0xf7, 0x88, 0x1b, 0x10, 0x0b,
	0x61, 0xfb, 0x4d, 0x6a, 0xd3, 0xe6, 0x0d, 0xf2, 0x25, 0xbd, 0x4c, 0x98, 0x31, 0x58, 0xf5, 0x7d,
	0x55, 0xf2, 0x15, 0xf1, 0x54, 0xb3, 0xe7, 0xb0, 0xee, 0x49, 0xbc, 0x26, 0xd2, 0x81, 0xf0, 0x97,
	0x07, 0x9b, 0x21, 0x8e, 0x9d, 0x48, 0x0b, 0x2a, 0x64, 0x3d, 0xf8, 0x4f, 0xd8, 0xa6, 0xf8, 0xac,
	0x51, 0xa5, 0x37, 0x63, 0x0a, 0x87, 0xac, 0x93, 0xad, 0x86, 0x04, 0x54, 0x5b, 0xee, 0xd6, 0x1a,
	0x0d, 0xee, 0xb6, 0x66, 0x97, 0xb0, 0xcc, 0xd2, 0x1b, 0xf2, 0x5e, 0x0b, 0x5b, 0x5a, 0xe6, 0xc3,
	0x4f, 0xe4, 0x3e, 0x89, 0x6c, 0x69, 0x13, 0x7e, 0x32, 0xb9, 0x41, 0xbe, 0x71, 0x09, 0x09, 0xd8,
	0x7d, 0xa4, 0x19, 0xdf, 0xba, 0x7d, 0xa4, 0x99, 0x9d, 0x9e, 0x49, 0x65, 0x78, 0x10, 0x2d, 0xf6,
	0x4b, 0x41, 0x35, 0xbb, 0x82, 0xe0, 0xa3, 0x54, 0x58, 0x9d, 0xda, 0x34, 0xe3, 0x40, 0xd2, 0x99,
	0x60, 0x11, 0xec, 0x06, 0x40, 0x8d, 0x3b, 0x6a, 0x7c, 0x48, 0x59, 0xe7, 0xb4, 0x95, 0x25, 0xf2,
	0xc7, 0x94, 0xcf, 0x01, 0x96, 0xc0, 0xea, 0xae, 0x6a, 0x90, 0x3f, 0xa1, 0x83, 0x08, 0x13, 0x77,
	0x57, 0xc9, 0x78, 0x57, 0xc9, 0xdd, 0x78, 0x57, 0x82, 0x74, 0xf1, 0x3b, 0x78, 0xf6, 0xe0, 0xab,
	0x75, 0x27, 0x5b, 0x8d, 0xff, 0x7c, 0x27, 0x87, 0x8d, 0xee, 0x0b, 0xbb, 0x6f, 0xda, 0xe4, 0x56,
	0x8c, 0xf0, 0xf0, 0x05, 0x82, 0xa9, 0x9d, 0xdd, 0xc2, 0xc5, 0x51, 0x61, 0x6e, 0x70, 0xa6, 0x5e,
	0x9e, 0x39, 0xa9, 0xf0, 0xea, 0xff, 0x8f, 0x2e, 0x44, 0xfc, 0xe8, 0xde, 0xa7, 0xd4, 0x6f, 0xfe,
	0x04, 0x00, 0x00, 0xff, 0xff, 0x91, 0x31, 0xca, 0x52, 0x39, 0x03, 0x00, 0x00,
}
